<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>org.vpac.grisu</groupId>

	<parent>
		<artifactId>grisu-clients</artifactId>
		<groupId>org.vpac.grisu</groupId>
		<version>0.3-SNAPSHOT</version>
	</parent>


	<artifactId>grisu-template-client</artifactId>
	<packaging>jar</packaging>
	<version>0.3-SNAPSHOT</version>
	<name>Grisu template client</name>
	<description>A grisu swing client which uses templates to render app-specific job creation panels.</description>

	<repositories>
		<repository>
			<id>ARCS</id>
			<url>http://code.arcs.org.au/nexus/content/groups/public</url>
		</repository>
		<repository>
			<id>ARCS Snapshots</id>
			<url>http://code.arcs.org.au/nexus/content/groups/public-snapshots
			</url>
		</repository>
	</repositories>

	<!--
		we can help you publish your artifact into our maven repository if you
		want. Write an email to markus.binsteiner@arcs.org.au and request a
		username/password for the ARCS maven repository. Then uncomment this
		part and edit your $HOME/.m2/settings.xml file with your
		username/password. Deployment is done via 'mvn clean install deploy'
		<distributionManagement> <repository> <id>arcs.release</id> <name>ARCS
		Release Repository</name>
		<url>http://code.arcs.org.au/nexus/content/repositories/releases
		</url> <uniqueVersion>false</uniqueVersion> </repository>
		<snapshotRepository> <id>arcs.snapshot</id> <name>ARCS SNAPSHOT
		Repository</name>
		<url>http://code.arcs.org.au/nexus/content/repositories/snapshots
		</url> <uniqueVersion>false</uniqueVersion> </snapshotRepository>
		</distributionManagement>
	-->

	<dependencies>

		<!-- the main grisu dependency. -->
		<dependency>
			<groupId>org.vpac.grisu</groupId>
			<artifactId>grisu-client-swing</artifactId>
			<version>0.3-SNAPSHOT</version>
			<type>jar</type>
			<scope>compile</scope>
			<exclusions>
				<exclusion>
					<artifactId>java-getopt</artifactId>
					<groupId>urbanophile</groupId>
				</exclusion>
			</exclusions>
		</dependency>

		<!--
			we can't include the bouncy castle library in our assembled binary so
			it has to put in the classpath in some other way. You could either
			have the bcprov jar in the same directory as your executable jar, or
			you just do nothing. Grisu will try to download it in the background
			and put it in the classpath once your application is executed the
			first time...
		-->
		<dependency>
			<groupId>bouncycastle</groupId>
			<artifactId>bcprov-jdk15</artifactId>
			<version>140</version>
			<type>jar</type>
			<scope>provided</scope>
		</dependency>

		<!--
			further grisu dependencies, incuded by default but can be disabled if
			not needed and you want a smaller assembly
		-->
		<!--
			the grisu-core dependency is needed when you want to connect to a
			local backend (which is the only supported backend for grisu 0.3 at
			the moment
		-->
		<dependency>
			<groupId>org.vpac.grisu</groupId>
			<artifactId>grisu-core</artifactId>
			<version>0.3-SNAPSHOT</version>
			<type>jar</type>
			<scope>provided</scope>
		</dependency>
		<!--
			this is needed for shibboleth login don't disable it for now even if
			you don't want to use shibboleth, I reckon you'll get classpath
			errors
		-->
		<dependency>
			<groupId>au.org.arcs.auth</groupId>
			<artifactId>arcs-gsi</artifactId>
			<version>1.2</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>


		<!--  test dependencies -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>3.8.1</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>

		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>1.5</source>
					<target>1.5</target>
				</configuration>
			</plugin>
			
			<!-- replace version in file -->
			<plugin>
				<groupId>com.google.code.maven-replacer-plugin</groupId>
				<artifactId>maven-replacer-plugin</artifactId>
				<version>1.3.2</version>
				<executions>
					<execution>
						<!-- the replace should happen before the app is packaged -->
						<phase>prepare-package</phase>
						<goals>
							<goal>replace</goal>
						</goals>
					</execution>
				</executions>

				<configuration>
					<includes>
						<!-- replace the token in this file -->
						<include>target/classes/grisu-template-client.version</include>
					</includes>
					<regex>false</regex>
					<!-- the name of the token to replace -->
					<token>VERSION_TOKEN</token>
					<!-- replace it with the maven project version -->
					<value>${project.version}</value>
				</configuration>
			</plugin>
			
			
			<!--
				you can disable the assembly plugin if you want, your builds will be
				faster I find it quite handy to have maven build an executable jar,
				though
			-->
			<plugin>
				<artifactId>maven-assembly-plugin</artifactId>
				<executions>
					<execution>
						<phase>package</phase>
						<configuration>

							<descriptors>
								<descriptor>client.assembly.xml</descriptor>
							</descriptors>
							<finalName>grisu-template-client</finalName>
							<archive>
								<index>true</index>
								<manifest>
									<mainClass>org.vpac.grisu.frontend.view.swing.GrisuTemplateApp</mainClass>
								</manifest>
								<manifestEntries>
									<Class-Path>bcprov.jar bcprov-jdk15-143.jar local-backend.jar grisu-client-library.jar
									</Class-Path>
								</manifestEntries>
							</archive>

						</configuration>
						<goals>
							<goal>attached</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

</project>

